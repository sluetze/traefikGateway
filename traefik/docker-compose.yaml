version: '3.7'

  #############################################################################################
  #############################################################################################
  ##
  ## Traefik/LetsEncrypt/KeyCloak/Jaeger (OUTER)
  ## 
  ## .env You have to create .env files with
  ## all the parameters pre-filled before starting
  ## this docker-compose.yml file.
  ##
  ## .env in the same directory as docker-compose.yml
  ##############################################################################################
  ## # Variables to configure the traefik bundle
  ## 
  ## # Letsencrypt for TLS security
  ## ## Letsencrypt - using Cloud Flare DNS Challenge
  ## CF_API_EMAIL=<email address you registered with cloudflare>
  ## You need a zone token to enable Let's Encrypt to automate the DNS Challenge
  ## CF_DNS_API_TOKEN=<TOKEN HERE>
  ## CF_ZONE_API_TOKEN=<TOKEN HERE>
  ## 
  ## # Keycloak Identity provider
  ## 
  ## ## Keycloak database (postgresql)
  ## KEYCLOAKBACKUP=/home/steve/traefikGateway/keycloak
  ## DOMAINNAME=<your domain that is managed on CloudFlare>
  ## DB_USER=keycloak
  ## DB_PASSWORD=password
  ## 
  ## ## Keycloak master password
  ## KEYCLOAK_USER=admin
  ## KEYCLOAK_PASSWORD=Pa55w0rd
  ## 
  ## # OpenID Connect details
  ## # This is based on using the Master realm. Create a new client, this will go into your CLIENT_ID, CLIENT_SECRET details.
  ## PROVIDERS_OIDC_ISSUER_URL=https://keycloak.<yourdomain that is managed on CloudFlare>/auth/realms/master
  ## PROVIDERS_OIDC_CLIENT_ID=<Name of Keycloak client you create to protect your apps>
  ## PROVIDERS_OIDC_CLIENT_SECRET=<Secret of above Keycloak client>
  ## <eof>
  ##
  ##
  ##
  #############################################################################################
  #############################################################################################

networks:
  traefik:
    external: true
    name: traefik
  keycloak:
    name: keycloak

# volumes:
#   postgres_data:
#     driver: local

services:

  ##############################################
  ##############################################
  ##
  ## KEYCLOAK-DB
  ## PostgreSQL database to persist the IDP data
  ##
  ##############################################
  ##############################################
  keycloak-db:
    image: postgres
    container_name: keycloak-db
    networks:
      - keycloak
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
#       - /etc/localtime:/etc/localtime:ro
    ports:
      - 5432:5432
    environment:
      - LOG_MIN_MESSAGES=INFO
# Tell Postgress what user/password to create
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
#    restart: always

    command: ["postgres", "-c", "log_min_messages=INFO"]

  #########################################################
  #########################################################
  ##
  ## KEYCLOAK-DB-BACKUP
  ## Script to backup the Keycloak DB on startup and daily
  ##
  #########################################################
  #########################################################
  keycloak-db-backup:
    image: postgres
    container_name: keycloak-db-backup
    networks:
      - keycloak
    volumes:
      - ${KEYCLOAKBACKUP}:/dump
#      - /etc/localtime:/etc/localtime:ro
    environment:
      - PGHOST=keycloak-db
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - BACKUP_NUM_KEEP=7
      - BACKUP_FREQUENCY=1d
    entrypoint: |
      bash -c 'bash -s <<EOF
      trap "break;exit" SIGHUP SIGINT SIGTERM
      sleep 2m
      while /bin/true; do
        pg_dump -Fc > /dump/dump_\`date +%d-%m-%Y"_"%H_%M_%S\`.psql
        (ls -t /dump/dump*.psql|head -n $$BACKUP_NUM_KEEP;ls /dump/dump*.psql)|sort|uniq -u|xargs rm -- {} 
        sleep $$BACKUP_FREQUENCY
      done
      EOF'
#    restart: always
    depends_on:
      - keycloak-db

      
  #########################################################
  #########################################################
  ##
  ## KEYCLOAK
  ## Identity provider
  ## Official Image
  #########################################################
  #########################################################
  keycloak:
#   image: quay.io/keycloak/keycloak:latest
    image: jboss/keycloak
    container_name: keycloak
    domainname: ${DOMAINNAME}
#   ports:
#     - 8080:8080
    networks:
      - keycloak
      - traefik
#   volumes:
#     - ${KEYCLOAKBACKUP}/keycloak/config.json:/config.json
#     - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=1000
      - PGID=1000
      - KEYCLOAK_LOGLEVEL=WARNING
# https://geek-cookbook.funkypenguin.co.nz/recipes/keycloak/setup-oidc-provider/
      - KEYCLOAK_USER=${KEYCLOAK_USER}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
#     - KEYCLOAK_IMPORT=/config.json
      - DB_VENDOR=postgres
      - DB_DATABASE=keycloak
      - DB_ADDR=keycloak-db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
# This is required to run keycloak behind traefik
      - PROXY_ADDRESS_FORWARDING=true
      - KEYCLOAK_HOSTNAME=keycloak.${DOMAINNAME}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.port=8080"

      - "traefik.backend=traefik"

      # Define the URL to access this app
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.${DOMAINNAME}`)"

      # Access via HTTPS only
      - "traefik.http.routers.keycloak.entrypoints=websecure"

      # The application (i.e. this container)
      - "traefik.http.routers.keycloak.service=keycloak"

      # Select middleware chain https-only and keycloakforwardauth
      #- "traefik.http.routers.keycloak.middlewares=keycloakForwardAuth"
      #- "traefik.http.routers.keycloak.middlewares=secured"

      - "traefik.http.services.keycloak.loadbalancer.server.port=8080"

      # TLS is used to protect the domain
      - "traefik.http.routers.keycloak.tls=true"
      - "traefik.http.routers.keycloak.tls.certresolver=leresolver"
      - "traefik.http.routers.keycloak.tls.domains[0].main=${DOMAINNAME}"
      - "traefik.http.routers.keycloak.tls.domains[0].sans=*.${DOMAINNAME}"

#   restart: always
    depends_on:
      - keycloak-db

# The auth gate for SSO
# https://geek-cookbook.funkypenguin.co.nz/ha-docker-swarm/traefik-forward-auth/


  #########################################################
  #########################################################
  ##
  ## TRAEFIK-FORWARD-AUTH
  ## Traefik middleware providing OpenID connect support
  ## through Keycloak IDP
  #########################################################
  #########################################################
  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2

#   image: thomseddon/traefik-forward-auth
#   image: funkypenguin/traefik-forward-auth
    container_name: traefik-forward-auth
    networks:
      - traefik
    ports:
      - 4181:4181
    environment:
      - DEFAULT_PROVIDER=oidc
      - DEFAULT_ACTION=auth
      # This is based on using the Master realm. Create a new client, this will go into your CLIENT_ID, CLIENT_SECRET details.
      - PROVIDERS_OIDC_ISSUER_URL=${PROVIDERS_OIDC_ISSUER_URL}
      - PROVIDERS_OIDC_CLIENT_ID=${PROVIDERS_OIDC_CLIENT_ID}
      - PROVIDERS_OIDC_CLIENT_SECRET=${PROVIDERS_OIDC_CLIENT_SECRET}
      - SECRET=THISISASECRET
#      - INSECURE_COOKIE=true
      - AUTH_HOST=auth.${DOMAINNAME}
      - URL_PATH=/_oauth
      - COOKIE_DOMAIN=${DOMAINNAME}
      - COOKIE_NAME=_forward_auth
      - CSRF_COOKIE_NAME=_forward_auth_csrf
      - LOG_LEVEL=warn
# https://github.com/thomseddon/traefik-forward-auth/blob/master/examples/docker-compose-oidc.yml
# https://github.com/thomseddon/traefik-forward-auth#user-restriction
#      WHITELIST: ${EMAIL}
#      COOKIE_SECURE: "true"
      - LIFETIME=2592000
#      - LIFETIME=43200 # 12 hours
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.port=4181"

      # Define the URL to access this app
      - "traefik.http.routers.traefik-forward-auth.rule=Host(`auth.${DOMAINNAME}`)"

      # Access via HTTPS only
      - "traefik.http.routers.traefik-forward-auth.entrypoints=websecure"

      - "traefik.frontend.rule=Host:auth.${DOMAINNAME},"
      - "traefik.frontend.headers.SSLHost=oauth.${DOMAINNAME}"

      - "traefik.frontend.passHostHeader=true"
      - "traefik.frontend.headers.SSLForceHost=true"
      - "traefik.frontend.headers.customResponseHeaders=X-Robots-Tag:noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex"
      - "traefik.frontend.headers.SSLRedirect=true"
      - "traefik.frontend.headers.browserXSSFilter=true"
      - "traefik.frontend.headers.contentTypeNosniff=true"
      - "traefik.frontend.headers.forceSTSHeader=true"
      - "traefik.frontend.headers.STSSeconds=315360000"
      - "traefik.frontend.headers.STSIncludeSubdomains=true"
      - "traefik.frontend.headers.STSPreload=true"
      - "traefik.frontend.headers.frameDeny=true"

      - "traefik.backend=traefik-forward-auth"

      - "traefik.frontend.auth.forward.address=http://traefik-forward-auth:4181"
      - "traefik.frontend.auth.forward.trustForwardHeader=true"
      - "traefik.frontend.auth.forward.authResponseHeaders=X-Forwarded-User"
      
      - "traefik.http.routers.traefik-forward-auth.service=forward-auth-svc"
      - "traefik.http.services.forward-auth-svc.loadbalancer.server.port=4181"

      # TLS is used to protect the domain      
      - "traefik.http.routers.traefik-forward-auth.tls=true"
      - "traefik.http.routers.traefik-forward-auth.tls.certresolver=leresolver"
      - "traefik.http.routers.traefik-forward-auth.tls.domains[0].main=${DOMAINNAME}"
      - "traefik.http.routers.traefik-forward-auth.tls.domains[0].sans=*.${DOMAINNAME}"

      # Forward authentication to keycloak      
      #- "traefik.http.routers.traefik-forward-auth.middlewares=keycloakForwardAuth"
      - "traefik.http.routers.traefik-forward-auth.middlewares=myForwardAuth@file"

      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.address=http://traefik-forward-auth:4181/auth" 
#      - "traefik.http.routers.traefik-forward-auth.middlewares=secured"
#      - traefik.http.middlewares.secured.chain.middlewares=https-only@docker,keycloakForwardAuth@docker
#      - traefik.http.middlewares.https-only.redirectscheme.scheme=https      
      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.trustForwardHeader=true"
      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.authResponseHeaders=X-Auth-User, X-Secret"
#      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.authResponseHeaders=X-Forwarded-User, X-WebAuth-User"
      - "traefik.http.middlewares.keycloakForwardAuth.forwardauth.tls.insecureSkipVerify=true"
    depends_on:
      - keycloak
      - traefik


  #########################################################
  #########################################################
  ##
  ## TRAEFIK
  ## The official v2.3 Traefik docker image
  ## The Cloud Native Edge Router
  ##
  #########################################################
  #########################################################
  traefik:
    
    image: traefik:v2.3
    container_name: traefik
    command: 
#     - "--accesslog=true"
      - "--log.level=INFO"
      - "--ping=true"
#      - "--ping.entrypoint=pingport"

      - "--api"
      - "--api.debug=true"
#     - "--api.insecure=true # Enables the web UI"

      # Define the ports Traefik listens on
      - "--entrypoints.web.address=:80" #Declares the web entrypoint in Traefik
      - "--entrypoints.websecure.address=:443" #Declares the websecure entrypoint in Traefik
      - "--entrypoints.apiport.address=:10080" #Declares the webapi entrypoint in Traefik
      - "--entrypoints.pingport.address=:10081"
      - "--entrypoints.ssh.address=:10022/tcp"
      - "--entrypoints.httpauthforward.address=:4181"
      
      - "--entrypoints.ssh.proxyProtocol.insecure=true"
      - "--entrypoints.ssh.forwardedHeaders.insecure=true"
        
#     Enable a tls challenge named "leresolver"
      - "--certificatesresolvers.leresolver.acme.email=${CF_API_EMAIL}"
      - "--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.leresolver.acme.dnschallenge.provider=cloudflare"
#     - "--certificatesresolvers.leresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

#     - "--file"
#     - "--resolvers=[192.168.1.1:53,1.1.1.1:53,]"

      - "--global.sendAnonymousUsage=true"

      # Providers
      # Tell Traefik to listen to docker
      - "--providers.docker=true" 
      - "--providers.docker.exposedbydefault=false"
      
      - "--providers.file.directory=/conf"
      - "--providers.file.watch=true"
      
      - "--tracing=true"
      - "--tracing.serviceName=traefik"
      - "--tracing.jaeger=true"
      - "--tracing.jaeger.samplingServerURL=http://localhost:5778/sampling"
      - "--tracing.jaeger.samplingType=const"
      - "--tracing.jaeger.samplingParam=1.0"
      - "--tracing.jaeger.traceContextHeaderName=uber-trace-id"
      - "--tracing.jaeger.collector.endpoint=http://jaeger-collector:14268/api/traces?format=jaeger.thrift"

      - "--pilot.token=7dfa8bcd-95a5-4140-bef3-8ec0fdfbe004"
  

    environment:
      TZ: "Europe/Zurich"
      CF_API_EMAIL: ${CF_API_EMAIL}
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN}
      CF_ZONE_API_TOKEN: ${CF_ZONE_API_TOKEN}

    ports:
      - "80:80"       # HTTP Port  - web
      - "443:443"     # HTTPS Port - websecure
      - "10022:10022" # TCP Port   - ssh
      - "10080:10080" # API Port   - apiport --api.insecure=true)
      - "10081:10081" # Ping port  - pingport
      
    volumes:
      # So that Traefik can listen to the Docker events
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
      - "./conf:/conf"

    networks:
      - traefik

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"

      # Define the URL to access this app
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAINNAME}`)"

      # Define the URL to access this app - split API and dashboard as different routes
#      - "traefik.http.routers.traefik.rule`(Host(`traefik.${DOMAINNAME}`) && PathPrefix(`/dashboard`) )"
#      - "traefik.http.routers.api.rule`(Host(`traefik.${DOMAINNAME}`) && PathPrefix(`/api`) )"
     
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.entrypoints=websecure"

      # Expose Traefik api to APIPort only.
      - "traefik.http.routers.api.entrypoints=websecure"
      #- "traefik.http.routers.api.middlewares=websecure"

      # Basic authentication by file
      # - "traefik.http.routers.traefik.middlewares=usersfile@file"
      # Forward authentication to keycloak for logon
      - "traefik.http.routers.traefik.middlewares=myForwardAuth@file"

#      - "traefik.http.routers.traefik.service=traefik"
#      - "traefik.http.services.traefik.loadbalancer.server.port=4181"

      # Global Redirect HTTP to HTTPS
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=websecure"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"

      # Certificate name and san
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=leresolver"
      - "traefik.http.routers.traefik.tls.domains[0].main=${DOMAINNAME}"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAINNAME}"


    restart: always



  #########################################################
  #########################################################
  ##
  ## WHOAMI1
  ## Test app to show IP address and other discovered 
  ## information
  #########################################################
  #########################################################
  whoami1:
    # A container that exposes an API to show its IP address
    image: containous/whoami
    networks:
      - traefik

    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      - "traefik.port=80"

      # Define the URL to access this app
      - "traefik.http.routers.whoami1.rule=Host(`whoami1.${DOMAINNAME}`)"

      # Access via HTTPS only
      - "traefik.http.routers.whoami1.entrypoints=websecure"

      # Forward authentication to keycloak for logon
      - "traefik.http.routers.whoami1.middlewares=myForwardAuth@file"
      
      # The application (i.e. this container)
      - "traefik.http.routers.whoami1.service=whoami1"
      - "traefik.http.services.whoami1.loadbalancer.server.port=80"

      # TLS is used to protect the domain
      - "traefik.http.routers.whoami1.tls=true"
      - "traefik.http.routers.whoami1.tls.certresolver=leresolver"
      - "traefik.http.routers.whoami1.tls.domains[0].main=${DOMAINNAME}"
      - "traefik.http.routers.whoami1.tls.domains[0].sans=*.${DOMAINNAME}"
